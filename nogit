#!/usr/bin/env python
import argparse
import subprocess
import datetime
import os
import datetime
import sys

def git_pull():
    subprocess.run(['git', 'pull'])

def git_push(username, message, use_lfs):
    cmd = ['git']
    if username:
        subprocess.run(cmd + ['add'] + ['.'])
        if message:
            cmd += ['commit', '-m', f'"{message}"']
        else:   
            current_date = datetime.datetime.now().strftime("%Y-%m-%d")
            message = f"uploaded by {username} on {current_date}"
            cmd += ['commit', '-m', message]

        subprocess.run(cmd)
        if branch:
            subprocess.run('git', 'branch', '-M', f'"{branch}"')
            if use_lfs:
                cmd = ['git', 'lfs', 'push', 'origin', f'"{branch}"']
            else:
                cmd = ['git', 'push', 'origin', f'"{branch}"']
        else:
            subprocess.run(cmd + ['branch'] + ['-M'] + ['General_branch'])
            if use_lfs:
                cmd = ['git', 'lfs', 'push', 'origin', 'General_branch']
            else:
                cmd = ['git', 'push', 'origin', 'General_branch']
        subprocess.run(cmd)
    else:
        print("A username argument is required to run nogit...")
        sys.exit()

def move_removed_files():
    current_dir = os.getcwd()

    # Check if git is initialized in the current directory
    git_initialized = subprocess.run(['git', 'rev-parse', '--is-inside-work-tree'], capture_output=True, text=True).returncode == 0
    if not git_initialized:
        # Initialize git and add all files
        subprocess.run(['git', 'init'])
        subprocess.run(['git', 'add', '.'])

    # Check the default branch of the local repository
    default_branch = subprocess.run(['git', 'symbolic-ref', '--short', 'HEAD'], capture_output=True, text=True).stdout.strip()
    if os.path.basename(current_dir) == "Lottery":
        # If the directory is "Lottery", change the default branch to "General_branch" if necessary
        if default_branch != "General_branch":
            subprocess.run(['git', 'checkout', '-b', 'General_branch'])
    else:
        # If the directory is not "Lottery", set the default branch to "General_branch" if it does not exist
        branches = subprocess.run(['git', 'branch'], capture_output=True, text=True).stdout.strip().split('\n')
        if "General_branch" not in branches:
            subprocess.run(['git', 'checkout', '-b', 'General_branch'])

def main():
    art = """               ++  :|
:::\ ,::\ /::| :| :::|
:|:| `::/ \::| :|  :|
          ,.:/         """
    print(art)
    print("...nogit is an open source framework on top of git that can simplify unnecessary git commands")
    print("...nogit can also automate many mundane tasks you do on your machine")
    print("...you can check the source code in https://github.com/nathfavour/NOGIT ")
    print("\n")

    parser = argparse.ArgumentParser(description='Emulate basic Git operations.')
    parser.add_argument('--u', dest="username", default='default_user', help='Specify the username for commit message.')
    parser.add_argument('--m', dest="message", default=None, help='Specify the commit message.')
    parser.add_argument('--L', '--lfs', action='store_true', help='Use Git Large File Storage (LFS).')
    parser.add_argument("--b", dest="branch", default=None, help="Branch name")

    args = parser.parse_args()
    branch = args.branch
    username = args.username
    message = args.message
    use_lfs = args.L

    # Check if git is initialized in the current directory
    git_initialized = subprocess.run(['git', 'rev-parse', '--is-inside-work-tree'], capture_output=True, text=True).returncode == 0
    if not git_initialized:
        # Initialize git
        subprocess.run(['git', 'init'])
        # Set the default branch to "General_branch"
        subprocess.run(['git', 'checkout', '-b', 'General_branch'])

    print("Comparing local and remote repository branches...")
    git_pull()
   
    print("Checking for new files...")
    subprocess.run(['git', 'add', '.'])

    status_output = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True).stdout.strip()
    if status_output:
        print("Pushing new files to remote repository...")
        git_push(username, message, use_lfs)
    else:
        print("No new files to push.")

    print("Checking for removed files...")
    move_removed_files()
    try:
        move_removed_files()
    except:
        print("There is an error somewhere... Please leave a notification in the question.txt file.")
        print("Someone will see it and help you perform your git operations instead")
        sys.exit()
    if username:
        git_push(username)
    else:
        print("You did not provide a (--u username) argument, so a pull operation will run instead...")
        git_pull()

if __name__ == '__main__':
    main()
